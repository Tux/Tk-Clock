.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 2023-05-01 "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tk::Clock \- Clock widget with analog and digital display
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use Tk
\&  use Tk::Clock;
\&
\&  $clock = $parent\->Clock (?\-option => <value> ...?);
\&
\&  $clock\->config (        # These reflect the defaults
\&      timeZone    => "",
\&      useLocale   => "C",
\&      backDrop    => "",
\&
\&      useAnalog   => 1,
\&      handColor   => "Green4",
\&      secsColor   => "Green2",
\&      tickColor   => "Yellow4",
\&      tickFreq    => 1,
\&      tickDiff    => 0,
\&      useSecHand  => 1,
\&      handCenter  => 0,
\&      anaScale    => 100,
\&      autoScale   => 0,
\&      ana24hour   => 0,
\&      countDown   => 0,
\&      timerValue  => 0,
\&      localOffset => 0,
\&
\&      useInfo     => 0,
\&      infoColor   => "#cfb53b",
\&      infoFormat  => "HH:MM:SS",
\&      infoFont    => "fixed 6",
\&
\&      useDigital  => 1,
\&      digiAlign   => "center",
\&      timeFont    => "fixed 6",
\&      timeColor   => "Red4",
\&      timeFormat  => "HH:MM:SS",
\&      dateFont    => "fixed 6",
\&      dateColor   => "Blue4",
\&      dateFormat  => "dd\-mm\-yy",
\&      );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module implements a Canvas-based clock widget for perl-Tk with lots
of options to change the appearance.
.PP
Both analog and digital clocks are implemented.
.SH METHODS
.IX Header "METHODS"
.SS Clock
.IX Subsection "Clock"
This is the constructor. It does accept the standard widget options plus those
described in "config".
.SS config
.IX Subsection "config"
Below is a description of the options/attributes currently available. Their
default value is in between parenthesis.
.IP "useAnalog (1)" 4
.IX Item "useAnalog (1)"
.PD 0
.IP "useInfo (0)" 4
.IX Item "useInfo (0)"
.IP "useDigital (1)" 4
.IX Item "useDigital (1)"
.PD
Enable the analog clock (\f(CW\*(C`useAnalog\*(C'\fR) and/or the digital clock (\f(CW\*(C`useDigital\*(C'\fR)
in the widget. The analog clock will always be displayed above the digital part
.Sp
.Vb 8
\&  +\-\-\-\-\-\-\-\-\-\-+
\&  |    ..    |  \e
\&  |  . \e_ .  |   |_ Analog clock
\&  |  .    .  |   |
\&  |    ..    |  /
\&  | 23:59:59 |  \-\-\- Digital time
\&  | 31\-12\-09 |  \-\-\- Digital date
\&  +\-\-\-\-\-\-\-\-\-\-+
.Ve
.Sp
The analog clock displays ticks, hour hand, minutes hand and second hand.
The digital part displays two parts, which are configurable. By default
these are time and date.
.Sp
The \f(CW\*(C`useInfo\*(C'\fR enables a text field between the backdrop of the analog
clock and its items. You can use this field to display personal data.
.IP "autoScale (0)" 4
.IX Item "autoScale (0)"
When set to a true value, the widget will try to re-scale itself to
automatically fit the containing widget.
.Sp
.Vb 1
\&  $clock\->config (autoScale => 1);
.Ve
.IP "anaScale (100)" 4
.IX Item "anaScale (100)"
The analog clock can be enlarged or reduced using anaScale for which
the default of 100% is about 72x72 pixels.
.Sp
When using \f(CW\*(C`pack\*(C'\fR for your geometry management, be sure to pass
\&\f(CW\*(C`\-expand =&gt; 1, \-fill =&gt; "both"\*(C'\fR if you plan to resize with
\&\f(CW\*(C`anaScale\*(C'\fR or enable/disable either analog or digital after the
clock was displayed.
.Sp
.Vb 1
\&  $clock\->config (anaScale => 400);
.Ve
.IP "ana24hour (0)" 4
.IX Item "ana24hour (0)"
The default for the analog clock it the normal 12 hours display, as
most clocks are. This option will show a clock where one round of the
hour-hand will cover a full day of 24 hours, noon is at the bottom
where the 6 will normally display.
.Sp
.Vb 1
\&  $clock\->config (ana24hour => 1);
.Ve
.IP "useSecHand (1)" 4
.IX Item "useSecHand (1)"
This controls weather the seconds-hand is shown.
.Sp
.Vb 1
\&  $clock\->config (useSecHand => 0);
.Ve
.IP "countDown (0)" 4
.IX Item "countDown (0)"
When \f(CW\*(C`countDown\*(C'\fR is set to a true value, the clock will run backwards.
This is a slightly experimental feature, it will not count down to a
specific point in time, but will simply reverse the rotation, making
the analog clock run counterclockwise.
.IP "timerValue (0)" 4
.IX Item "timerValue (0)"
This represents a countdown timer.
.Sp
When setting \f(CW\*(C`timerValue\*(C'\fR to a number of seconds, the format values
\&\f(CW\*(C`Hc\*(C'\fR, \f(CW\*(C`Mc\*(C'\fR, and \f(CW\*(C`Sc\*(C'\fR will represent the hour, minute and second of
the this value. When the time reaches 0, all countdown values are
reset to 0.
.IP "localOffset (0)" 4
.IX Item "localOffset (0)"
The value of this attribute represents the local offset for this clock
in seconds. Negative is back in time, positive is in the future.
.Sp
.Vb 2
\&  # Wind back clock 4 days, 5 hours, 6 minutes and 7 seconds
\&  $clock\->config (localOffset => \-363967);
.Ve
.IP "handColor (""Green4"")" 4
.IX Item "handColor (""Green4"")"
.PD 0
.IP "secsColor (""Green2"")" 4
.IX Item "secsColor (""Green2"")"
.PD
Set the color of the hands of the analog clock. \f(CW\*(C`handColor\*(C'\fR controls
the color for both the hour-hand and the minute-hand. \f(CW\*(C`secsColor\*(C'\fR
controls the color for the seconds-hand.
.Sp
.Vb 4
\&  $clock\->config (
\&      handColor => "#7F0000",
\&      secsColor => "OrangeRed",
\&      );
.Ve
.IP "handCenter (0)" 4
.IX Item "handCenter (0)"
If set to a true value, will display a circular extension in the center
of the analog clock that extends the hands as if they have a wider area
at their turning point, like many station-type clocks (at least in the
Netherlands) have.
.Sp
.Vb 1
\&  $clock\->config (handCenter => 1);
.Ve
.IP "tickColor (""Yellow4"")" 4
.IX Item "tickColor (""Yellow4"")"
Controls the color of the ticks in the analog clock.
.Sp
.Vb 1
\&  $clock\->config (tickColor => "White");
.Ve
.IP "tickFreq (1)" 4
.IX Item "tickFreq (1)"
.PD 0
.IP "tickDiff (0)" 4
.IX Item "tickDiff (0)"
.PD
\&\f(CW\*(C`tickFreq\*(C'\fR controls how many ticks are shown in the analog clock.
.Sp
Meaningful values for \f(CW\*(C`tickFreq\*(C'\fR are 1, 5 and 15 showing all ticks, tick
every 5 minutes or the four main ticks only, though any positive integer
will do (put a tick on any \f(CW\*(C`tickFreq\*(C'\fR minute).
.Sp
When setting tickDiff to a true value, the major ticks will use a thicker
line than the minor ticks.
.Sp
.Vb 4
\&  $clock\->config (
\&      tickFreq => 5,
\&      tickDiff => 1,
\&      );
.Ve
.IP "timeZone ("""")" 4
.IX Item "timeZone ("""")"
Set the timezone for the widget. The format should be the format recognized
by the system. If unset, the local timezone is used.
.Sp
.Vb 2
\&  $clock\->config (timeZone => "Europe/Amsterdam");
\&  $clock\->config (timeZone => "MET\-1METDST");
.Ve
.IP "useLocale (""C"")" 4
.IX Item "useLocale (""C"")"
Use this locale for the text shown in month formats \f(CW\*(C`mmm\*(C'\fR and \f(CW\*(C`mmmm\*(C'\fR and in
day formats \f(CW\*(C`ddd\*(C'\fR and \f(CW\*(C`dddd\*(C'\fR.
.Sp
.Vb 2
\&  $clock\->config (useLocale => $ENV{LC_TIME} // $ENV{LC_ALL}
\&                            // $ENV{LANG}    // "nl_NL.utf8");
.Ve
.Sp
See <http://docs.moodle.org/dev/Table_of_locales> for a table of locales
and the Windows equivalents. Windows might not have a UTF8 version available
of the required locale.
.IP "timeFont (""fixed 6"")" 4
.IX Item "timeFont (""fixed 6"")"
Controls the font to be used for the top line in the digital clock. Will
accept all fonts that are supported in your version of perl/Tk. This includes
both True Type and X11 notation.
.Sp
.Vb 1
\&  $clock\->config (timeFont => "{Liberation Mono} 11");
.Ve
.IP "timeColor (""Red4"")" 4
.IX Item "timeColor (""Red4"")"
Controls the color of the first line (time) of the digital clock.
.Sp
.Vb 1
\&  $clock\->config (timeColor => "#00ff00");
.Ve
.IP "timeFormat (""HH:MM:SS"")" 4
.IX Item "timeFormat (""HH:MM:SS"")"
Defines the format of the first line of the digital clock. By default it
will display the time in a 24\-hour notation.
.Sp
Legal \f(CW\*(C`timeFormat\*(C'\fR characters are \f(CW\*(C`H\*(C'\fR and \f(CW\*(C`HH\*(C'\fR for 24\-hour, \f(CW\*(C`h\*(C'\fR and
\&\f(CW\*(C`hh\*(C'\fR for AM/PM hour, \f(CW\*(C`M\*(C'\fR and \f(CW\*(C`MM\*(C'\fR for minutes, \f(CW\*(C`S\*(C'\fR and \f(CW\*(C`SS\*(C'\fR for
seconds, \f(CW\*(C`Hc\*(C'\fR for countdown/timer hour, \f(CW\*(C`Mc\*(C'\fR for countdown/timer
minutes, \f(CW\*(C`Sc\*(C'\fR for countdown/timer seconds, \f(CW\*(C`A\*(C'\fR for AM/PM indicator,
\&\f(CW\*(C`d\*(C'\fR and \f(CW\*(C`dd\*(C'\fR for day-of-the month, \f(CW\*(C`ddd\*(C'\fR and \f(CW\*(C`dddd\*(C'\fR for short and
long weekday, \f(CW\*(C`m\*(C'\fR, \f(CW\*(C`mm\*(C'\fR, \f(CW\*(C`mmm\*(C'\fR and \f(CW\*(C`mmmm\*(C'\fR for month, \f(CW\*(C`y\*(C'\fR and \f(CW\*(C`yy\*(C'\fR
for year, \f(CW\*(C`w\*(C'\fR and \f(CW\*(C`ww\*(C'\fR for week-number and any separators \f(CW\*(C`:\*(C'\fR, \f(CW\*(C`\-\*(C'\fR,
\&\f(CW\*(C`/\*(C'\fR or \f(CW\*(C`space\*(C'\fR.
.Sp
.Vb 1
\&  $clock\->config (timeFormat => "hh:MM A");
.Ve
.Sp
The text shown in the formats \f(CW\*(C`ddd\*(C'\fR, \f(CW\*(C`dddd\*(C'\fR, \f(CW\*(C`mmm\*(C'\fR, and \f(CW\*(C`mmmm\*(C'\fR might be
influenced by the setting of \f(CW\*(C`useLocale\*(C'\fR. The fallback is locale "C".
.IP "dateFont (""fixed 6"")" 4
.IX Item "dateFont (""fixed 6"")"
Controls the font to be used for the bottom line in the digital clock. Will
accept all fonts that are supported in your version of perl/Tk. This includes
both True Type and X11 notation.
.Sp
.Vb 1
\&  $clock\->config (dateFont => "\-misc\-fixed\-*\-normal\-\-15\-*\-c\-iso8859\-1");
.Ve
.IP "dateColor (""Blue4"")" 4
.IX Item "dateColor (""Blue4"")"
Controls the color of the second line (date) of the digital clock.
.Sp
.Vb 1
\&  $clock\->config (dateColor => "Navy");
.Ve
.IP "dateFormat (""dd-mm-yy"")" 4
.IX Item "dateFormat (""dd-mm-yy"")"
Defines the format of the second line of the digital clock. By default it
will display the date in three groups of two digits representing the day of
the month, the month, and the last two digits of the year, separated by dashes.
.Sp
.Vb 1
\&  $clock\->config (dateFormat => "ww dd\-mm");
.Ve
.Sp
The supported format is the same as for \f(CW\*(C`timeFormat\*(C'\fR.
.IP "infoFont (""fixed 6"")" 4
.IX Item "infoFont (""fixed 6"")"
Controls the font to be used for the info label in the analog clock. Will
accept all fonts that are supported in your version of perl/Tk. This includes
both True Type and X11 notation.
.Sp
.Vb 1
\&  $clock\->config (infoFont => "{DejaVu Sans Mono} 8");
.Ve
.IP "infoColor (""#cfb53b"")" 4
.IX Item "infoColor (""#cfb53b"")"
Controls the color of the info label of the analog clock (default is a
shade of Gold).
.Sp
.Vb 1
\&  $clock\->config (infoColor => "Yellow");
.Ve
.IP "infoFormat (""HH:MM:SS"")" 4
.IX Item "infoFormat (""HH:MM:SS"")"
Defines the format of the label inside the analog clock. By default will not
be displayed. Just as \f(CW\*(C`timeFormat\*(C'\fR and \f(CW\*(C`dateFormat\*(C'\fR the content is updated
every second if enabled.
.Sp
.Vb 1
\&  $clock\->config (infoFormat => "BREITLING");
.Ve
.Sp
The supported format is the same as for \f(CW\*(C`timeFormat\*(C'\fR.
.IP "digiAlign (""center"")" 4
.IX Item "digiAlign (""center"")"
Controls the placement of the text in the digital clock. The only legal values
for \f(CW\*(C`digiAlign\*(C'\fR are "left", "center", and "right".
Any other value will be interpreted as the default "center".
.Sp
.Vb 1
\&  $clock\->config (digiAlign => "right");
.Ve
.IP "backDrop ("""")" 4
.IX Item "backDrop ("""")"
By default the background of the clock is controlled by the \f(CW\*(C`\-background\*(C'\fR
attribute to the constructor, which may default to the default background
used in the perl/Tk script.
.Sp
The \f(CW\*(C`backDrop\*(C'\fR attribute accepts any valid Tk::Photo object, and it will
show (part of) the image as a backdrop of the clock
.Sp
.Vb 4
\&  use Tk;
\&  use Tk::Clock;
\&  use Tk::Photo;
\&  use Tk::PNG;
\&
\&  my $mainw = MainWindow\->new;
\&  my $backd = $mainw\->Photo (
\&      \-file    => "image.png",
\&      );
\&  my $clock = $mainw\->Clock (
\&      \-relief  => "flat",
\&      )\->pack (\-expand => 1, \-fill => "both");
\&  $clock\->config (
\&      backDrop => $backd,
\&      );
\&  MainLoop;
.Ve
.PP
The \f(CW\*(C`new ()\*(C'\fR constructor will also accept options valid for Canvas widgets,
like \f(CW\*(C`\-background\*(C'\fR and \f(CW\*(C`\-relief\*(C'\fR.
.SH TAGS
.IX Header "TAGS"
As all of the clock is part of a Canvas, the items cannot be addressed as
Subwidgets. You can however alter presentation afterwards using the tags:
.PP
.Vb 2
\& my $clock = $mw\->Clock\->pack;
\& $clock\->itemconfigure ("date", \-fill => "Red");
.Ve
.PP
Currently defined tags are \f(CW\*(C`date\*(C'\fR, \f(CW\*(C`hour\*(C'\fR, \f(CW\*(C`info\*(C'\fR, \f(CW\*(C`min\*(C'\fR, \f(CW\*(C`sec\*(C'\fR,
\&\f(CW\*(C`tick\*(C'\fR, and \f(CW\*(C`time\*(C'\fR.
.SH BUGS
.IX Header "BUGS"
If the system load's too high, the clock might skip some seconds.
.PP
There's no check if either format will fit in the given space.
.SH TODO
.IX Header "TODO"
* Full support for multi-line date\- and time-formats with auto-resize.
* Countdown clock API, incl action when done.
* Better docs for the attributes
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBTk\fR\|(3), \fBTk::Canvas\fR\|(3), \fBTk::Widget\fR\|(3), \fBTk::Derived\fR\|(3)
.SH AUTHOR
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
.PP
Thanks to Larry Wall for inventing perl.
Thanks to Nick Ing-Simmons for providing perlTk.
Thanks to Achim Bohnet for introducing me to OO (and converting
    the basics of my clock.pl to Tk::Clock.pm).
Thanks to Sriram Srinivasan for understanding OO though his Panther book.
Thanks to all CPAN providers for support of different modules to learn from.
Thanks to all who have given me feedback and weird ideas.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 1999\-2023 H.Merijn Brand
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
